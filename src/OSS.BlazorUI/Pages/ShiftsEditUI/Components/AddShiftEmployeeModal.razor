@using OSS.BlazorUI.Components;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Actions;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Components;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Store;
@using OSS.Domain.Entities;

@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<ShiftsEditUiState> AppState

<ModalDialog Title="Add Shift Employee" IsVisible="@IsVisible" SetVisible="SetVisible">
    <div class="row">
        <table>
            <tr>
                <td>Employee</td>
                <td>
                    <select @bind="EmpId">
                        @foreach (var emp in AppState.Value.Employees)
                        {
                            <option value="@emp.UserId">@emp.DisplayName</option>
                        }
                    </select>
                </td>
            </tr>
            <tr>
                <td>Participation Type</td>
                <td>
                    <select @bind="PartTypeId">
                        @foreach (var sp in AppState.Value.ShiftParticipationTypes)
                        {
                            <option value="@sp.Id">@sp.Name</option>
                        }
                    </select>
                </td>
            </tr>
        </table>
    </div>
    <div class="row">
        <button class="btn btn-success" @onclick="OnAddShiftParticipationClick">Submit</button>
        <button class="btn btn-danger" @onclick="() => SetVisible(false)">Close</button>
    </div>
</ModalDialog>

@code {
    private string EmpId { get; set; } = string.Empty;
    private int PartTypeId { get; set; } = -1;
    public bool IsVisible { get => AppState.Value.ShowAddEmpToShiftModal; }
    public void SetVisible(bool isVisible)
    {
        Dispatcher.Dispatch(new SetShowAddShiftEmpModalAction(isVisible));
    }

    public void OnAddShiftParticipationClick()
    {
        var activeShift = AppState.Value.ActiveShift;
        var newPart = new ShiftParticipation
            {
                ShiftId = activeShift.Id,
                EmployeeId = EmpId,
                ShiftParticipationTypeId = PartTypeId,
                ParticipationSequence = 0
            };
        Dispatcher.Dispatch(new CreateShiftParticipationAction(newPart, activeShift));
    }
}
