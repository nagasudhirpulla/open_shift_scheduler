@using OSS.BlazorUI.Pages.ShiftsEditUI.Actions;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Components;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Store;
@using OSS.Domain.Entities;

@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<ShiftsEditUiState> AppState
@inject IJSRuntime JsRuntime

<div class="shift_cell col-md-@Colsize d-flex align-items-stretch flex-column" style="background-color:@ShiftType.ColorString;border:1px dashed #aaa">
    <div class="d-flex flex-row-reverse">
        <h6 class="shift_cell_type_name small">@ShiftType.Name</h6>
        <button class="btn btn-outline btn-sm shift_comm_btn" @onclick="()=>OpenEditShiftCommentsModal()"><i class="@(!string.IsNullOrEmpty(Shift.Comments)?"far fa-comment-dots":"far fa-comment")"></i></button>
    </div>
    <div>
        @if (Shift.ShiftParticipations != null)
        {
            @foreach (var shiftPart in Shift.ShiftParticipations.OrderBy(s => s.ParticipationSequence))
            {
                <div class="part_disp_row m-1">
                    <button class="btn btn-outline-info btn-sm part_up_btn" @onclick="()=>MoveShiftParticipation(shiftPart, true)"><i class="fas fa-arrow-alt-circle-down"></i></button>
                    <span class="@getPartDecorationClassStr(shiftPart)" style="@getPartDecorationStyleStr(shiftPart)">@($"{shiftPart.ParticipationSequence + 1}. {getEmployeeName(shiftPart.EmployeeId)}")</span>
                    <button class="btn btn-outline-info btn-sm part_down_btn" @onclick="()=>MoveShiftParticipation(shiftPart, false)"><i class="fas fa-arrow-alt-circle-up"></i></button>
                    <button class="btn btn-outline-warning btn-sm part_edit_btn" @onclick="()=>ShowEditShiftPartModal(shiftPart)"><i class="fas fa-pencil-alt"></i></button>
                    <button class="btn btn-outline-danger btn-sm part_del_btn" @onclick="()=>onShiftPartDelClick(shiftPart)"><i class="fas fa-trash-alt"></i></button>
                </div>
            }
        }
    </div>
    <div class="cell_btns_div d-flex flex-sm-row flex-column mt-auto">
        <button @onclick="()=>OpenAddShiftEmpModal()" class="btn btn-sm btn-outline-success part_add_btn m-1"><span class="h6 small">+Employee</span></button>
        <button @onclick="()=>OpenAddParticipationsFromGrpModal()" class="btn btn-sm btn-outline-success grp_add_btn m-1"><span class="h6 small">+Shift Group</span></button>
        <button @onclick="()=>OnDeleteAllShiftParticipations()" class="btn btn-sm btn-outline-danger rem_all_part_btn m-1"><span class="h6 small">-Remove All</span></button>
    </div>
</div>

@code {
    public int Colsize { get; set; }
    public ShiftType ShiftType { get; set; } = new();

    [Parameter, EditorRequired]
    public ShiftDTO Shift { get; set; } = new();

    private void OpenAddShiftEmpModal()
    {
        Dispatcher.Dispatch(new SetActiveShiftAction(Shift));
        Dispatcher.Dispatch(new SetShowAddShiftEmpModalAction(true));
    }

    private void OpenAddParticipationsFromGrpModal()
    {
        Dispatcher.Dispatch(new SetActiveShiftAction(Shift));
        Dispatcher.Dispatch(new SetShowAddParticipationsFromGrpModalAction(true));
    }

    private void OpenEditShiftCommentsModal()
    {
        Dispatcher.Dispatch(new SetActiveShiftAction(Shift));
        Dispatcher.Dispatch(new SetShowEditShiftCommentsModalAction(true));
    }

    private void MoveShiftParticipation(ShiftParticipation sp, bool isUp)
    {
        Dispatcher.Dispatch(new MoveShiftParticipationAction(sp, isUp));
    }

    private void ShowEditShiftPartModal(ShiftParticipation sp)
    {
        Dispatcher.Dispatch(new SetActiveShiftParticipationAction(sp));
        Dispatcher.Dispatch(new SetShowEditShiftParticipationModalAction(true));
    }

    private void onShiftPartDelClick(ShiftParticipation sp)
    {
        Dispatcher.Dispatch(new DeleteShiftParticipationAction(sp));
    }

    private async void OnDeleteAllShiftParticipations()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (!confirmed)
        {
            return;
        }
        Dispatcher.Dispatch(new DeleteAllShiftParticipationsAction(Shift));
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Colsize = (int)Math.Floor((double)(12 / (AppState.Value.ShiftTypes.Count)));
        ShiftType = AppState.Value.ShiftTypes.FirstOrDefault(s => s.Id == Shift.ShiftTypeId) ?? new();
    }

    protected string getPartDecorationStyleStr(ShiftParticipation sp)
    {
        Dictionary<string, string> styleObj = new();
        var shiftPartObj = AppState.Value.ShiftParticipationTypes.Find(x => x.Id == sp.ShiftParticipationTypeId);
        if (shiftPartObj == null)
        {
            return string.Empty;
        }
        styleObj["color"] = shiftPartObj.ColorString;
        styleObj["background-color"] = shiftPartObj.BgClrString;
        styleObj["padding"] = "0.2rem";
        return DictToStyle(styleObj);
    }

    protected string getPartDecorationClassStr(ShiftParticipation sp)
    {
        List<string> classList = new() { "h6" };
        var shiftPartObj = AppState.Value.ShiftParticipationTypes.Find(x => x.Id == sp.ShiftParticipationTypeId);
        if (shiftPartObj == null)
        {
            return string.Empty;
        }
        if (shiftPartObj.IsAbsence)
        {
            classList.Add("absence_shift_part");
        }
        if (shiftPartObj.IsBold)
        {
            classList.Add("font-weight-bold");

        }
        return string.Join(" ", classList);
    }

    protected string getEmployeeName(string empId)
    {
        return AppState.Value.Employees.FirstOrDefault(e => e.UserId == empId)?.DisplayName ?? "";
    }

    protected string DictToStyle(Dictionary<string, string> styleDict)
    {
        List<string> styleStrs = new();
        foreach (var k in styleDict)
        {
            styleStrs.Add($"{k.Key}:{k.Value}");
        }
        return string.Join(";", styleStrs);
    }

}
