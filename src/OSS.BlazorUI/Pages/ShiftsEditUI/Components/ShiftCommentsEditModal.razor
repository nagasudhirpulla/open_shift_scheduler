@using OSS.BlazorUI.Components;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Actions;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Components;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Store;
@using OSS.Domain.Entities;
@using System.ComponentModel.DataAnnotations;

@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<ShiftsEditUiState> AppState

<ModalDialog Title="Edit Shift Comments" IsVisible="@IsVisible" SetVisible="SetVisible">
    <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="shiftComments">Shift Comments</label>
            <InputText class="form-control" id="shiftComments" @bind-Value="model.Comments" />
        </div>

        <button class="btn btn-success" type="submit">Submit</button>
        <button class="btn btn-danger" @onclick="() => SetVisible(false)" type="button">Close</button>

        <ValidationSummary />
    </EditForm>
</ModalDialog>

@code {
    private bool _isVisible = false;
    public bool IsVisible { get => _isVisible; }
    public void SetVisible(bool isVisible)
    {
        Dispatcher.Dispatch(new SetShowEditShiftCommentsModalAction(isVisible));
    }

    private ShiftCommentsEditorModel model = new();

    private class ShiftCommentsEditorModel
    {
        [EditorRequired]
        public string Comments { get; set; } = string.Empty;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppState.StateChanged += (newState, e) =>
        {
            bool isModalVisibleInApp = ((IState<ShiftsEditUiState>)newState).Value.ShowEditShiftCommentsModal;
            if (isModalVisibleInApp != IsVisible)
            {
                // sync with visibility in state
                _isVisible = isModalVisibleInApp;
                if (_isVisible)
                {
                    model.Comments = AppState.Value.ActiveShift.Comments;
                }
            }
        };
    }

    private void HandleValidSubmit()
    {
        Dispatcher.Dispatch(new EditShiftCommentsAction(AppState.Value.ActiveShift, model.Comments));
        SetVisible(false);
    }
}

