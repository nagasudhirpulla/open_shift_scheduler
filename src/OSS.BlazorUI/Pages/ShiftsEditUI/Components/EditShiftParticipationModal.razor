@using OSS.BlazorUI.Components;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Actions;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Components;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Store;
@using OSS.Domain.Entities;
@using System.ComponentModel.DataAnnotations;

@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<ShiftsEditUiState> AppState

<ModalDialog Title="Edit Shift Participation" IsVisible="@IsVisible" SetVisible="SetVisible">
    <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
        <div class="form-group">
            <label for="employeeId">Employee</label>
            <InputSelect class="form-control" id="employeeId" @bind-Value="model.EmployeeId">
                @foreach (var emp in AppState.Value.Employees)
                {
                    <option value="@emp.UserId">@emp.DisplayName</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="partTypeId">Participation Type</label>
            <InputSelect class="form-control" id="partTypeId" @bind-Value="model.ShiftParticipationTypeId">
                @foreach (var sp in AppState.Value.ShiftParticipationTypes)
                {
                    <option value="@sp.Id">@sp.Name</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="partSeq">Participation Sequence</label>
            <InputNumber class="form-control" id="partSeq" @bind-Value="model.ParticipationSequence" />
        </div>

        <button class="btn btn-success" type="submit">Submit</button>
        <button class="btn btn-danger" @onclick="() => SetVisible(false)" type="button">Close</button>
    </EditForm>
</ModalDialog>

@code {
    private bool _isVisible = false;
    public bool IsVisible { get => _isVisible; }
    public void SetVisible(bool isVisible)
    {
        Dispatcher.Dispatch(new SetShowEditShiftParticipationModalAction(isVisible));
    }

    private EditShiftParticipationModel model = new();

    private class EditShiftParticipationModel
    {
        [EditorRequired]
        public string EmployeeId { get; set; } = string.Empty;

        [EditorRequired]
        [Range(0, int.MaxValue, ErrorMessage = "Please select valid Shift Participation")]
        public int ShiftParticipationTypeId { get; set; } = -1;

        [EditorRequired]
        [Range(0, int.MaxValue, ErrorMessage = "Participation Sequence should be greater than 0")]
        public int ParticipationSequence { get; set; } = -1;

        public int ShiftId { get; set; } = -1;

        public int Id { get; set; } = -1;

    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppState.StateChanged += (newState, e) =>
        {
            bool isModalVisibleInApp = ((IState<ShiftsEditUiState>)newState).Value.ShowEditShiftParticipationModal;
            if (isModalVisibleInApp != IsVisible)
            {
                // sync with state if visibility changed
                _isVisible = isModalVisibleInApp;
                if (_isVisible)
                {
                    var activePart = AppState.Value.ActiveShiftParticipation;
                    model = new()
                        {
                            EmployeeId = activePart.EmployeeId,
                            ShiftParticipationTypeId = activePart.ShiftParticipationTypeId,
                            ParticipationSequence = activePart.ParticipationSequence + 1,
                            ShiftId = activePart.ShiftId,
                            Id = activePart.Id
                        };
                }
            }
        };
    }

    private void HandleValidSubmit()
    {
        ShiftParticipation newPart = new()
            {
                Id = model.Id,
                EmployeeId = model.EmployeeId,
                ShiftId = model.ShiftId,
                ShiftParticipationTypeId = model.ShiftParticipationTypeId,
                ParticipationSequence = model.ParticipationSequence - 1
            };
        Dispatcher.Dispatch(new EditShiftParticipationAction(newPart));
        Dispatcher.Dispatch(new SetShowEditShiftParticipationModalAction(false));
    }
}

