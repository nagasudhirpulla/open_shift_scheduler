@using OSS.BlazorUI.Components;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Actions;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Components;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Store;
@using OSS.Domain.Entities;

@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<ShiftsEditUiState> AppState

<ModalDialog Title="Edit Shift Participation" IsVisible="@IsVisible" SetVisible="SetVisible">
    <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
        <div class="form-group">
            <label for="employeeId">Employee</label>
            <InputSelect class="form-control" id="employeeId" @bind-Value="model.EmployeeId">
                @foreach (var emp in AppState.Value.Employees)
                {
                    <option value="@emp.UserId">@emp.DisplayName</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="partTypeId">Participation Type</label>
            <InputSelect class="form-control" id="partTypeId" @bind-Value="model.ShiftParticipationTypeId">
                @foreach (var sp in AppState.Value.ShiftParticipationTypes)
                {
                    <option value="@sp.Id">@sp.Name</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="partSeq">Participation Sequence</label>
            <InputNumber class="form-control" id="partSeq" @bind-Value="model.ParticipationSequence" />
        </div>

        <button class="btn btn-success" type="submit">Submit</button>
        <button class="btn btn-danger" @onclick="() => SetVisible(false)">Close</button>
    </EditForm>
</ModalDialog>

@code {
    private ShiftParticipation model => AppState.Value.ActiveShiftParticipation;

    public bool IsVisible { get => AppState.Value.ShowEditShiftParticipationModal; }
    public void SetVisible(bool isVisible)
    {
        Dispatcher.Dispatch(new SetShowEditShiftParticipationModalAction(isVisible));
    }

    private void HandleValidSubmit()
    {
        Dispatcher.Dispatch(new EditShiftParticipationAction(model));
        Dispatcher.Dispatch(new SetShowEditShiftParticipationModalAction(false));
    }
}

