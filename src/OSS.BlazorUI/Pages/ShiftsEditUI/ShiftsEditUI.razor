<Fluxor.Blazor.Web.StoreInitializer />

@using OSS.BlazorUI.Pages.ShiftsEditUI.Actions;
@using OSS.BlazorUI.Pages.ShiftsEditUI.Components
@using OSS.BlazorUI.Pages.ShiftsEditUI.Store;

@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<ShiftsEditUiState> AppState


<h3>Edit Shifts</h3>
<div class="datePickerDiv">
    <span>Start Time </span>
    <input type="date" @bind="StartDate" />
</div>
<div style="margin-left:0.5em" class="datePickerDiv">
    <span>End Time </span>
    <input type="date" @bind="EndDate" />
</div>
<button @onclick="OnLoadBtnClicked" class="btn btn-success btn-sm btn-icon-split loadBtn">
    <span class="icon text-white-50">
        <i class="fas fa-sync"></i>
    </span>
    <span class="text">Load</span>
</button>
<br />
<br />
<ShiftCellsMatrix />
<br />
<CommentsTable />


@code {

    public DateTime StartDate
    {
        get => AppState.Value.StartDate.ToDateTime(new TimeOnly(0));
        set => Dispatcher.Dispatch(new SetStartDateAction(DateOnly.FromDateTime(value)));
    }

    public DateTime EndDate
    {
        get => AppState.Value.EndDate.ToDateTime(new TimeOnly(0));
        set => Dispatcher.Dispatch(new SetEndDateAction(DateOnly.FromDateTime(value)));
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var nowTime = DateTime.Now;
        var startDt = new DateOnly(nowTime.Year, nowTime.Month, 1);
        var endDt = new DateOnly(nowTime.Year, nowTime.Month, DateTime.DaysInMonth(nowTime.Year, nowTime.Month));
        Dispatcher.Dispatch(new SetStartDateAction(startDt));
        Dispatcher.Dispatch(new SetEndDateAction(endDt));
        Dispatcher.Dispatch(new LoadInitialAppDataAction(startDt, endDt));
    }

    public void OnLoadBtnClicked()
    {
        Dispatcher.Dispatch(new LoadShiftsAction(AppState.Value.StartDate, AppState.Value.EndDate));
    }

    private void OnStartDateChanged(ChangeEventArgs args)
    {
        Dispatcher.Dispatch(new SetStartDateAction((DateOnly)(args.Value ?? DateOnly.FromDateTime(DateTime.Now))));
    }

    private void OnEndDateChanged(ChangeEventArgs args)
    {
        Dispatcher.Dispatch(new SetEndDateAction((DateOnly)(args.Value ?? DateOnly.FromDateTime(DateTime.Now))));
    }
}

<style>
    .timePicker {
        display: inline-block
    }

    .datePickerDiv {
        display: inline-block
    }

    .loadBtn {
        margin-left: 0.5em
    }
</style>
<style>
    .part_add_btn, .grp_add_btn, .rem_all_part_btn {
        border: none;
        padding: 0 !important;
        /*border is optional*/
    }

    .part_del_btn, .part_up_btn, .part_down_btn, .part_edit_btn {
        border: none;
    }

    .shift_date_display {
        margin: 0;
        padding: 2px;
    }

    .shift_cell {
        min-height: 150px;
    }

    .general_shift_part {
        /*color: blue;*/
    }

    .absence_shift_part {
        text-decoration: line-through;
    }
</style>
